#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
//.6.3.0.2259")
//_6_3_0_2259; ForNavReport51516378_v6_3_0_2259)    

Report 50378 "Dividend Processing-Prorated"
{
    UsageCategory = Tasks;
    RDLCLayout = './Layouts/DividendProcessing-Prorated.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Customer; Customer)
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", Status;
            column(ReportForNavId_6836; 6836) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }

            column(UserId; UserId)
            {
            }
            column(Customer__No__; Customer."No.")
            {
            }
            column(Customer_Name; Customer.Name)
            {
            }
            column(Customer__Current_Shares_; Customer."Current Shares")
            {
            }
            column(CustomerCaption; CustomerCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Customer__No__Caption; FieldCaption("No."))
            {
            }
            column(Customer_NameCaption; FieldCaption(Name))
            {
            }
            column(IntOnDeposits; IntOnDeposits) { }

            column(Customer__Current_Shares_Caption; FieldCaption("Current Shares"))
            {
            }
            column(Shares_Retained; "Shares Retained")
            {
            }
            column(DividendsTotal; DividendsTotal)
            { }
            column(WithTaxTotal; WthTAxTotal)
            { }
            column(DivTotal; DivTotal)
            {
            }
            column(Totalpay; Totalpay)
            { }
            // dataitem("Dividends Progression"; "Dividends Progression")
            // {
            //     DataItemLink = "Member No" = field("No.");
            //     RequestFilterFields = Date;
            // }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FIELDNO("No.");

                Cust.RESET;
                Cust.MODIFYALL(Cust."Net Dividend Payable", 0);
                //Initialize Poosting==============================================================================
                BATCH_TEMPLATE := 'PAYMENTS';
                BATCH_NAME := 'DIVIDEND';
                DOCUMENT_NO := 'DIV_' + FORMAT(PostingDate);
                ObjGensetup.GET();
                GenJournalLine.RESET;
                GenJournalLine.SETRANGE("Journal Template Name", BATCH_TEMPLATE);
                GenJournalLine.SETRANGE("Journal Batch Name", BATCH_NAME);
                GenJournalLine.DELETEALL;
            end;

            trigger OnAfterGetRecord();
            var
                WtaX: Decimal;



            begin
                Customer."Net Dividend Payable" := 0;

                DivProg.RESET;
                DivProg.SETCURRENTKEY("Member No");
                DivProg.SETRANGE(DivProg."Member No", Customer."No.");
                IF DivProg.FIND('-') THEN begin
                    DivProg.DELETEALL;
                end;


                IF Asat = 0D THEN begin
                    ERROR('You must specify start Date.');
                end;


                DivTotal := 0;
                "W/Tax" := 0;
                CommDiv := 0;
                WtaX := 0;
                WthTAxTotal := 0;
                TotalPay := 0;
                DividendsTotal := 0;
                IntOnDeposits := 0;
                QualifyingShares := 0;
                TheRunbal := 0;
                GenSetUp.GET();

                //1st Month
                EVALUATE(BDate, '01/01/05');
                FromDate := BDate;
                ToDate := CALCDATE('-1D', Asat);
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * ((Cust."Shares Retained"));
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * (Cust."Current Shares");

                        IntOnDeposits := CInterest;
                        // DividendsTotal := CDiv;
                        DivTotal := (CDiv + CInterest);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WtaX;
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (12 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (12 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;


                    END;
                END;

                //2nd Month(Jan)
                FromDate := Asat;
                ToDate := CALCDATE('-1D', CALCDATE('1M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN


                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * ((Cust."Shares Retained"));
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (11 / 12));
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        // DividendsTotal := +(DividendsTotal + CDiv);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;

                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (12 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (12 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                //3rd Month feb
                FromDate := CALCDATE('1M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('2M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * ((Cust."Shares Retained"));

                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (10 / 12));
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        // DividendsTotal := +(DividendsTotal + CDiv);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (11 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (11 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                //4th Month
                FromDate := CALCDATE('2M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('3M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");

                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (9 / 12));
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        //DividendsTotal := +(DividendsTotal + CDiv);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (10 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (10 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                //5th Month
                FromDate := CALCDATE('3M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('4M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (8 / 12));
                        IntOnDeposits := IntOnDeposits + CInterest;
                        // DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        // DividendsTotal := +(DividendsTotal + CDiv);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (9 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (9 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                //6th Month
                FromDate := CALCDATE('4M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('5M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (7 / 12));
                        IntOnDeposits := IntOnDeposits + CInterest;
                        // DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        // DividendsTotal := +(DividendsTotal + CDiv);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (8 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (8 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                //7th Month
                FromDate := CALCDATE('5M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('6M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (6 / 12));
                        IntOnDeposits := IntOnDeposits + CInterest;
                        //DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        //// DividendsTotal := +(DividendsTotal + CDiv);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (7 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (7 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                //8th Month
                FromDate := CALCDATE('6M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('7M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (5 / 12));
                        IntOnDeposits := IntOnDeposits + CInterest;
                        // DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        // DividendsTotal := +(DividendsTotal + CDiv);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (6 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (6 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                //9th Month
                FromDate := CALCDATE('7M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('8M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (4 / 12));
                        IntOnDeposits := IntOnDeposits + CInterest;
                        //  DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        // DividendsTotal := +(DividendsTotal + CDiv);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (5 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (5 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                //10th Month
                FromDate := CALCDATE('8M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('9M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN
                        // DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        // DividendsTotal := +(DividendsTotal + CDiv);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (3 / 12));
                        DivTotal := DivTotal + (CDiv + CInterest);
IntOnDeposits := IntOnDeposits + CInterest;
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (4 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (4 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                //11th Month
                FromDate := CALCDATE('9M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('10M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN
                        // DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        // DividendsTotal := +(DividendsTotal + CDiv);

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (2 / 12));
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (3 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (3 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;


                //12th Month
                FromDate := CALCDATE('10M', Asat);
                ToDate := CALCDATE('-1D', CALCDATE('11M', Asat));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN
                        CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (2 / 12));
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DivTotal := DivTotal + (CDiv + CInterest);

                        DivProg.INIT;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := DivTotal;
                        DivProg."Gross Interest On Deposit" := CInterest;
                        DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (2 / 12);
                        DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));
                        DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (2 / 12);
                        DivProg.Shares := Cust."Current Shares";
                        DivProg."Share Capital" := Cust."Shares Retained";
                        DivProg.INSERT;

                    END;
                END;

                // // 13TH SINCE DEC31ST AND JAN ARE COUNTING AS 1ST MONTH 

                // //13th Month
                // FromDate := CALCDATE('11M', Asat);
                // ToDate := CALCDATE('-1D', CALCDATE('12M', Asat));
                // EVALUATE(FromDateS, FORMAT(FromDate));
                // EVALUATE(ToDateS, FORMAT(ToDate));

                // DateFilter := FromDateS + '..' + ToDateS;
                // Cust.RESET;
                // Cust.SETCURRENTKEY("No.");
                // Cust.SETRANGE(Cust."No.", Customer."No.");
                // Cust.SETFILTER(Cust."Date Filter", DateFilter);
                // IF Cust.FIND('-') THEN BEGIN
                //     Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                //     IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                //         CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                //         QualifyingShares := (Cust."Current Shares") * (1 / 12);
                //         CInterest := (GenSetUp."Interest On Current Shares"/ 100) * QualifyingShares * (1 / 12);

                //         DivTotal := DivTotal + (CDiv + CInterest);
                //        //"Interest on Share Capital(%)"
                //         DividendsTotal := +(DividendsTotal + CDiv);
                //         WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                //         WthTAxTotal := WthTAxTotal + WtaX;
                //         DivTotal := DivTotal + (CDiv + CInterest);
                //         DivProg.INIT;
                //         DivProg."Member No" := Customer."No.";
                //         DivProg.Date := ToDate;
                //         DivProg."Gross Dividends" := DivTotal;
                //         DivProg."Gross Interest On Deposit" := CInterest;
                //         DivProg."Qualifying Share Capital" := ((Cust."Shares Retained")) * (1 / 12);
                //         DivProg."Witholding Tax" := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                //         DivProg."Net Dividends" := (CDiv + CInterest) - ((CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100));//(CDiv + CInterest) - (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                //         DivProg."Qualifying Shares" := ((Cust."Current Shares")) * (1 / 12);
                //         DivProg.Shares := Cust."Current Shares";
                //         DivProg."Share Capital" := Cust."Shares Retained";
                //         DivProg.INSERT;

                //     END;
                // END;

                //MESSAGE('scap%1',Cust."Shares Retained");

                Customer."Net Dividend Payable" := DivTotal;
                Customer.MODIFY;

                DivProg.RESET;
                DivProg.SETRANGE(DivProg."Member No", "No.");
                IF DivProg.FIND('-') THEN BEGIN
                    REPEAT
                        "W/Tax" += DivProg."Witholding Tax";
                        CommDiv += DivProg.Shares;
                    UNTIL DivProg.NEXT = 0;
                END;
                //MESSAGE('divtotal%1',DivTotal);
                //MESSAGE('divtotal%1',DivTotal);
                DivTotal := Round((DivTotal), 1, '<');

                //IF (DivTotal > 0) and (Customer.Blocked = Customer.Blocked::" ") THEN BEGIN
                IF (DivTotal > 0) then begin
                    ObjGensetup.GET();
                    //------------------------------------1. CREDIT MEMBER DIVIDEND A/C_Gross Dividend+Interest on Deposits---------------------------------------
                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::Dividend,
                    GenJournalLine."Account Type"::Customer, "No.", PostingDate, DivTotal * -1, 'BOSA', '',
                    'Gross Dividend+Interest on Deposits- ' + FORMAT(PostingDate), '');
                    //--------------------------------(CREDIT MEMBER DIVIDEND A/C_Gross Dividend+Interest on Deposits)---------------------------------------------

                    //------------------------------------1.1 DEBIT DIVIVIDEND PAYABLE GL A/C-----------------------------------------------------------------------
                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::" ",
                    GenJournalLine."Account Type"::"G/L Account", ObjGensetup."Dividend Payable Account", PostingDate, DivTotal, 'BOSA', '',
                    'Gross Dividend+Interest on Deposits- ' + FORMAT(PostingDate), '');
                    //----------------------------------(Debit Dividend Payable GL A/C)----------------------------------------------------------------------------

                    //------------------------------------2. DEBIT MEMBER DIVIDEND A/C_GROSS WITHHOLDING TAX-------------------------------------------------------
                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::Dividend,
                    GenJournalLine."Account Type"::Customer, "No.", PostingDate, Round((DivTotal * (ObjGensetup."Withholding Tax (%)" / 100)), 1, '<'), 'BOSA', '',
                    'Witholding Tax on Dividend- ' + FORMAT(PostingDate), '');
                    //--------------------------------(Debit Member Dividend A/C_Gross Witholding Tax)-------------------------------------------------------------

                    //------------------------------------2.1. CREDIT WITHHOLDING TAX GL A/C-----------------------------------------------------------------------
                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::" ",
                    GenJournalLine."Account Type"::"G/L Account", ObjGensetup."WithHolding Tax Account", PostingDate, round(((DivTotal * (ObjGensetup."Withholding Tax (%)" / 100)) * -1), 1, '<'), 'BOSA', '',
                    'Witholding Tax on Dividend- ' + FORMAT(PostingDate), '');
                    //----------------------------------(Credit Witholding tax gl a/c)-----------------------------------------------------------------------------

                    //------------------------------------3. DEBIT MEMBER DIVIDEND A/C_PROCESSING FEE--------------------------------------------------------------
                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::Dividend,
                    GenJournalLine."Account Type"::Customer, "No.", PostingDate, ObjGensetup."Dividend Processing Fee", 'BOSA', '',
                    'Processing Fee- ' + FORMAT(PostingDate), '');
                    //--------------------------------(Debit Member Dividend A/C_Processing Fee)-------------------------------------------------------------------

                    //------------------------------------3.1. CREDIT PROCESSING FEE INCOME GL A/C-----------------------------------------------------------------
                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::" ",
                    GenJournalLine."Account Type"::"G/L Account", ObjGensetup."Dividend Process Fee Account", PostingDate, ObjGensetup."Dividend Processing Fee" * -1, 'BOSA', '',
                    'Processing Fee- ' + FORMAT(PostingDate), '');
                    //----------------------------------(Credit Processing Fee income gl a/c)----------------------------------------------------------------------

                    //------------------------------------4. DEBIT MEMBER DIVIDEND A/C_EXCISE ON PROCESSING FEE----------------------------------------------------
                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::Dividend,
                    GenJournalLine."Account Type"::customer, "No.", PostingDate, Round((ObjGensetup."Dividend Processing Fee" * (ObjGensetup."Excise Duty(%)" / 100)), 1, '<'), 'BOSA', '',
                    'Excise Duty- ' + FORMAT(PostingDate), '');
                    //--------------------------------(Debit Member Dividend A/C_Excise On Processing Fee)---------------------------------------------------------

                    //------------------------------------4.1. CREDIT EXCISE DUTY GL A/C-----------------------------------------------------------------
                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::" ",
                    GenJournalLine."Account Type"::"G/L Account", ObjGensetup."Excise Duty Account", PostingDate, round(((ObjGensetup."Dividend Processing Fee" * (ObjGensetup."Excise Duty(%)" / 100)) * -1), 1, '<'), 'BOSA', '',
                    'Excise Duty- ' + FORMAT(PostingDate), '');
                    //----------------------------------(Credit Excise Duty gl a/c)----------------------------------------------------------------------



                    //CU posting
                    // GenJournalLine.RESET;
                    // GenJournalLine.SETRANGE("Journal Template Name",'PAYMENTS');
                    // GenJournalLine.SETRANGE("Journal Batch Name",'DIVIDEND');
                    // IF GenJournalLine.FIND('-') THEN
                    // CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post",GenJournalLine);//Customer."FOSA Account No."

                    // Remainder := 0;
                    TotalPay := (DividendsTotal + IntOnDeposits) - WthTAxTotal;
                    // Calculations := (TotalPay - (ObjGensetup."Dividend Processing Fee" + (ObjGensetup."Dividend Processing Fee" * (ObjGensetup."Excise Duty(%)" / 100))));
                    // TheRunbal := FnRecoverDividendAdvance("No.", Calculations);

                    // TheRunbal := FnRecoverLoansinArrears("No.", TheRunbal);//=========================Recover Loan In Arrears From Dividend Account
                    // FnRecoverCapitalizedAmount("No.");//======================Recover Capitalized Amount to Deposits
                    // Remainder := IntToRecover + LoanToRecover;


                END;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(Asat; Asat)
                {
                    ApplicationArea = Basic;
                }
                field(PostingDate; PostingDate)
                {
                    ApplicationArea = Basic;
                }

            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin

        end;
    }

    trigger OnInitReport()
    begin


    end;

    trigger OnPostReport()
    begin

    end;

    trigger OnPreReport()
    begin

    end;

    var
        QualifyingShares: Decimal;
        WthTAxTotal: Decimal;
        CustomerCaptionLbl: label 'Customer';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        Cust: Record Customer;
        Asat: Date;
        DateFilter: Text[100];
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text[100];
        ToDateS: Text[100];
        DivTotal: Decimal;
        GenSetUp: Record "Sacco General Set-Up";
        CDeposits: Decimal;
        CustDiv: Record Customer;
        DivProg: Record "Dividends Progression";
        CDiv: Decimal;
        CInterest: Decimal;
        BDate: Date;
        CustR: Record Customer;
        IntOnDeposits: Decimal;
        CIntReb: Decimal;
        LineNo: Integer;
        Gnjlline: Record "Gen. Journal Line";
        PostingDate: Date;
        "W/Tax": Decimal;
        CommDiv: Decimal;
        GenJournalLine: Record "Gen. Journal Line";
        SFactory: Codeunit "SURESTEP Factory";
        BATCH_NAME: Code[50];
        BATCH_TEMPLATE: Code[50];
        DOCUMENT_NO: Code[50];
        ObjGensetup: Record "Sacco General Set-Up";
        Totalpay: Decimal;
        WithTaxTotal: Decimal;
        DividendsTotal: Decimal;
        LoanType: Record "Loan Products Setup";
        TheRunbal: Decimal;
        Calculations: Decimal;
        Remainder: Decimal;
        IntToRecover: Decimal;
        LoanToRecover: Decimal;
        Vend: Record Vendor;


    local procedure FnRecoverLoansinArrears(MemberNo: Code[30]; Runbal: Decimal) VarRuningBal: Decimal;
    var
        ObjLoans: Record "Loans Register";
        VarAmountinArrears: Decimal;
        ObjMember: Record Customer;

        VarAmountRecovered: Decimal;
        InterestToRecover: Decimal;
    begin
        ObjGensetup.GET;
        ObjLoans.RESET;
        ObjLoans.SETRANGE(ObjLoans."Client Code", MemberNo);
        ObjLoans.SETFILTER(ObjLoans."Loans Category-SASRA", '=%1|%2|%3', ObjLoans."Loans Category-SASRA"::Doubtful, ObjLoans."Loans Category-SASRA"::Loss, ObjLoans."Loans Category-SASRA"::Substandard);
        ObjLoans.SETFILTER(ObjLoans."Outstanding Balance", '>%1', 0);

        IF ObjLoans.FINDSET THEN
            ObjMember.RESET;
        ObjMember.SETRANGE(ObjMember."No.", MemberNo);
        IF ObjMember.FINDSET THEN BEGIN
            ObjMember.CALCFIELDS(ObjMember."Dividend Amount");
            VarRuningBal := ObjMember."Dividend Amount";
            VarRuningBal := Runbal;
        END;
        BEGIN
            REPEAT
                IntToRecover := 0;
                LoanToRecover := 0;
                // VarAmountinArrears:=SFactory.FnGetLoanAmountinArrears(ObjLoans."Loan  No.");
                ObjLoans.CALCFIELDS(ObjLoans."Oustanding Interest");
                VarAmountinArrears := ObjLoans."Amount in Arrears";
                InterestToRecover := ObjLoans."Oustanding Interest";
                //----------------------Recover Interest--------------------------------------------------------

                IF InterestToRecover > 0 THEN BEGIN
                    IF VarRuningBal <= InterestToRecover THEN
                        InterestToRecover := VarRuningBal
                    ELSE
                        InterestToRecover := InterestToRecover;

                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::Dividend,
                    GenJournalLine."Account Type"::Customer, MemberNo, PostingDate, InterestToRecover, 'BOSA', ObjLoans."Loan  No.",
                    'Loan outstanding int Recovered- ' + FORMAT(ObjLoans."Loan  No."), ObjLoans."Loan  No.");

                    //------------------------------------2.1. CREDIT MEMBER interest outstanding-----------------------------------------------------------------------
                    LineNo := LineNo + 10000;
                    SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::"Interest Paid",
                    GenJournalLine."Account Type"::Customer, MemberNo, PostingDate, InterestToRecover * -1, 'BOSA', ObjLoans."Loan  No.",
                    'Loan outstanding int Recovered From Dividend- ' + FORMAT(PostingDate), ObjLoans."Loan  No.");
                    VarRuningBal := VarRuningBal - InterestToRecover;

                END;


                IF VarAmountinArrears > 0 THEN BEGIN

                    // IF (ObjLoans."Loans Category-SASRA" <> ObjLoans."Loans Category-SASRA"::Watch) AND (ObjLoans."Loans Category-SASRA" <> ObjLoans."Loans Category-SASRA"::Perfoming) THEN BEGIN
                    IF (ObjLoans."Loans Category-SASRA" = ObjLoans."Loans Category-SASRA"::Substandard)
                      OR (ObjLoans."Loans Category-SASRA" <> ObjLoans."Loans Category-SASRA"::Doubtful)
                      OR (ObjLoans."Loans Category-SASRA" <> ObjLoans."Loans Category-SASRA"::Loss)
                      THEN BEGIN

                        IF VarRuningBal >= VarAmountinArrears THEN BEGIN

                            VarAmountRecovered := VarAmountinArrears
                        END ELSE
                            VarAmountRecovered := VarRuningBal;

                        //------------------------------------2. DEBIT MEMBER DIVIDEND A/C_LOAN IN ARREARS-------------------------------------------------------
                        LineNo := LineNo + 10000;
                        SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::Dividend,
                        GenJournalLine."Account Type"::Customer, MemberNo, PostingDate, VarAmountRecovered, 'BOSA', ObjLoans."Loan  No.",
                        'Loan in Arrears Recovered- ' + FORMAT(ObjLoans."Loan  No."), ObjLoans."Loan  No.");
                        //--------------------------------(Debit Member Dividend A/C_Loan In Arrears)-------------------------------------------------------------

                        //------------------------------------2.1. CREDIT MEMBER LOAN IN AREARS-----------------------------------------------------------------------
                        LineNo := LineNo + 10000;
                        SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::Repayment,
                        GenJournalLine."Account Type"::Customer, MemberNo, PostingDate, VarAmountRecovered * -1, 'BOSA', ObjLoans."Loan  No.",
                        'Loan In Arrears Recovered From Dividend- ' + FORMAT(PostingDate), ObjLoans."Loan  No.");
                        //----------------------------------(Credit Member Loan In Arrears)-----------------------------------------------------------------------------
                        VarRuningBal := VarRuningBal - VarAmountRecovered;
                    END;
                    IntToRecover := InterestToRecover;
                    LoanToRecover := VarAmountRecovered;
                END;
            UNTIL ObjLoans.NEXT = 0;

        END;
        exit(VarRuningBal)
    end;

    // local procedure FnRecoverCapitalizedAmount(MemberNo: Code[30]) VarRunningBalance: Decimal
    // var
    //     ObjMember: Record Customer;
    //     VarExpectedCapitalizedAmount: Decimal;
    //     VarActualCapitalizedAmount: Decimal;
    //     VarDepositDifference: Decimal;


    // begin
    //     ObjGensetup.Get();
    //     //Individual Account==================================================================================================================
    //     ObjMember.Reset;
    //     ObjMember.SetRange(ObjMember."No.", MemberNo);
    //     ObjMember.SetRange(ObjMember."Account Category", ObjMember."account category"::Single);
    //     if ObjMember.FindSet then begin
    //         ObjMember.CalcFields(ObjMember."Dividend Amount");
    //         if ObjMember."Current Shares" < ObjGensetup."Div Capitalization Min_Indiv" then begin
    //             VarDepositDifference := ObjGensetup."Div Capitalization Min_Indiv" - ObjMember."Current Shares";
    //             VarExpectedCapitalizedAmount := ((ObjGensetup."Div Capitalization %" / 100) * ObjMember."Dividend Amount");
    //             if VarExpectedCapitalizedAmount > VarDepositDifference then begin
    //                 VarActualCapitalizedAmount := VarDepositDifference
    //             end else
    //                 VarActualCapitalizedAmount := VarExpectedCapitalizedAmount;
    //             //------------------------------------2. DEBIT MEMBER DIVIDEND A/C-------------------------------------------------------
    //             LineNo := LineNo + 10000;
    //             SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."transaction type"::Dividend,
    //             GenJournalLine."account type"::Customer, MemberNo, PostingDate, VarActualCapitalizedAmount, 'BOSA', '',
    //             'Dividend Capitalized- ' + Format(PostingDate), '');
    //             //--------------------------------(Debit Member Dividend A/C)-------------------------------------------------------------
    //             //------------------------------------2.1. CREDIT MEMBER DEPOSIT CONTRIBUTION-----------------------------------------------------------------------
    //             LineNo := LineNo + 10000;
    //             SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."transaction type"::"Deposit Contribution",
    //             GenJournalLine."account type"::Customer, MemberNo, PostingDate, VarActualCapitalizedAmount * -1, 'BOSA', '',
    //             'Dividend Capitalized- ' + Format(PostingDate), '');
    //             //----------------------------------(Credit Member Deposit Contribution)-----------------------------------------------------------------------------
    //             //CU posting
    //             GenJournalLine.Reset;
    //             GenJournalLine.SetRange("Journal Template Name", 'PAYMENTS');
    //             GenJournalLine.SetRange("Journal Batch Name", 'DIVIDEND');
    //             if GenJournalLine.Find('-') then
    //                 Codeunit.Run(Codeunit::"Gen. Jnl.-Post", GenJournalLine);
    //         end;
    //     end;
    //     ObjGensetup.Get();
    //     //Corporate Accounts========================================================================================================================
    //     ObjMember.Reset;
    //     ObjMember.SetRange(ObjMember."No.", MemberNo);
    //     ObjMember.SetRange(ObjMember."Account Category", ObjMember."account category"::Corporate);
    //     if ObjMember.FindSet then begin
    //         ObjMember.CalcFields(ObjMember."Dividend Amount");
    //         if ObjMember."Current Shares" < ObjGensetup."Div Capitalization Min_Corp" then begin
    //             VarDepositDifference := ObjGensetup."Div Capitalization Min_Corp" - ObjMember."Current Shares";
    //             VarExpectedCapitalizedAmount := ((ObjGensetup."Div Capitalization %" / 100) * ObjMember."Dividend Amount");
    //             if VarExpectedCapitalizedAmount > VarDepositDifference then begin
    //                 VarActualCapitalizedAmount := VarDepositDifference
    //             end else
    //                 VarActualCapitalizedAmount := VarExpectedCapitalizedAmount;
    //             //------------------------------------2. DEBIT MEMBER DIVIDEND A/C-------------------------------------------------------
    //             LineNo := LineNo + 10000;
    //             SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."transaction type"::Dividend,
    //             GenJournalLine."account type"::Customer, MemberNo, PostingDate, VarActualCapitalizedAmount, 'BOSA', '',
    //             'Dividend Capitalized- ' + Format(PostingDate), '');
    //             //--------------------------------(Debit Member Dividend A/C)-------------------------------------------------------------
    //             //------------------------------------2.1. CREDIT MEMBER DEPOSIT CONTRIBUTION-----------------------------------------------------------------------
    //             LineNo := LineNo + 10000;
    //             SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."transaction type"::"Deposit Contribution",
    //             GenJournalLine."account type"::Customer, MemberNo, PostingDate, VarActualCapitalizedAmount * -1, 'BOSA', '',
    //             'Dividend Capitalized- ' + Format(PostingDate), '');
    //             //----------------------------------(Credit Member Deposit Contribution)-----------------------------------------------------------------------------
    //             //CU posting
    //             // GenJournalLine.Reset;
    //             // GenJournalLine.SetRange("Journal Template Name", 'PAYMENTS');
    //             // GenJournalLine.SetRange("Journal Batch Name", 'DIVIDEND');
    //             // if GenJournalLine.Find('-') then
    //             //  Codeunit.Run(Codeunit::"Gen. Jnl.-Post", GenJournalLine);
    //         end;
    //     end;
    // end;

    // procedure FnRecoverDividendAdvance(MemberNo: code[30]; Runbalalance: Decimal) VarRuningBal: Decimal;
    // var
    //     ObjLoans: Record "Loans Register";
    //     VarAmountinArrears: Decimal;
    //     ObjMember: Record Customer;

    //     VarAmountRecovered: Decimal;
    //     InterestToRecover: Decimal;
    // begin
    //     ObjGensetup.GET;

    //     ObjLoans.RESET;
    //     ObjLoans.SETRANGE(ObjLoans."Client Code", MemberNo);
    //     // ObjLoans.SETRANGE("Product Code",'DIVADV');
    //     ObjLoans.SETAUTOCALCFIELDS(ObjLoans."Outstanding Balance");

    //     ObjLoans.SETFILTER(ObjLoans."Outstanding Balance", '>%1', 0);
    //     IF ObjLoans.FINDSET THEN
    //         ObjMember.RESET;
    //     ObjMember.SETRANGE(ObjMember."No.", MemberNo);
    //     IF ObjMember.FINDSET THEN BEGIN
    //         ObjMember.CALCFIELDS(ObjMember."Dividend Amount");
    //         // VarRuningBal:=ObjMember."Dividend Amount";
    //         VarRuningBal := Runbalalance;
    //     END;
    //     BEGIN
    //         REPEAT
    //             // VarAmountinArrears:=SFactory.FnGetLoanAmountinArrears(ObjLoans."Loan  No.");
    //             IF LoanType.GET(ObjLoans."Loan Product Type") THEN BEGIN
    //                 IF LoanType."Is Div Advance" THEN BEGIN
    //                     ObjLoans.CALCFIELDS(ObjLoans."Oustanding Interest");
    //                     VarAmountinArrears := ObjLoans."Outstanding Balance";
    //                     InterestToRecover := ObjLoans."Oustanding Interest";
    //                     //----------------------Recover Interest--------------------------------------------------------

    //                     IF InterestToRecover > 0 THEN BEGIN
    //                         IF VarRuningBal <= InterestToRecover THEN
    //                             InterestToRecover := VarRuningBal
    //                         ELSE
    //                             InterestToRecover := InterestToRecover;

    //                         LineNo := LineNo + 10000;
    //                         SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::Dividend,
    //                         GenJournalLine."Account Type"::Customer, MemberNo, PostingDate, InterestToRecover, 'BOSA', ObjLoans."Loan  No.",
    //                         'Div Advance outstanding int Recovered- ' + FORMAT(ObjLoans."Loan  No."), ObjLoans."Loan  No.");

    //                         //------------------------------------2.1. CREDIT MEMBER interest outstanding-----------------------------------------------------------------------
    //                         LineNo := LineNo + 10000;
    //                         SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::"Interest Paid",
    //                         GenJournalLine."Account Type"::Customer, MemberNo, PostingDate, InterestToRecover * -1, 'BOSA', ObjLoans."Loan  No.",
    //                         'Div Advance outstanding int Recovered From Dividend- ' + FORMAT(PostingDate), ObjLoans."Loan  No.");
    //                         VarRuningBal := VarRuningBal - InterestToRecover;
    //                     END;


    //                     IF VarAmountinArrears > 0 THEN BEGIN
    //                         IF VarRuningBal >= VarAmountinArrears THEN BEGIN
    //                             VarAmountRecovered := VarAmountinArrears
    //                         END ELSE
    //                             VarAmountRecovered := VarRuningBal;
    //                         //------------------------------------2. DEBIT MEMBER DIVIDEND A/C_LOAN IN ARREARS-------------------------------------------------------
    //                         LineNo := LineNo + 10000;
    //                         SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::Dividend,
    //                         GenJournalLine."Account Type"::Customer, MemberNo, PostingDate, VarAmountRecovered, 'BOSA', ObjLoans."Loan  No.",
    //                         'Div advance principle Recovered- ' + FORMAT(ObjLoans."Loan  No."), ObjLoans."Loan  No.");
    //                         //--------------------------------(Debit Member Dividend A/C_Loan In Arrears)-------------------------------------------------------------

    //                         //------------------------------------2.1. CREDIT MEMBER LOAN IN AREARS-----------------------------------------------------------------------
    //                         LineNo := LineNo + 10000;
    //                         SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."Transaction Type"::"Loan Repayment",
    //                         GenJournalLine."Account Type"::Customer, MemberNo, PostingDate, VarAmountRecovered * -1, 'BOSA', ObjLoans."Loan  No.",
    //                         'Div Advance Principle Recovered From Dividend- ' + FORMAT(PostingDate), ObjLoans."Loan  No.");
    //                         //----------------------------------(Credit Member Loan In Arrears)-----------------------------------------------------------------------------
    //                         VarRuningBal := VarRuningBal - VarAmountRecovered;

    //                     END;
    //                 END ELSE BEGIN
    //                 END;
    //             END;

    //         UNTIL ObjLoans.NEXT = 0;
    //     END;
    //     exit(VarRuningBal)


    // end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    //51516378_v6_3_0_2259;

}
